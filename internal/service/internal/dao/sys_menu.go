// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"fmt"
	"gfDemo/internal/model"
	"gfDemo/internal/model/entity"
	"gfDemo/internal/service/internal/dao/internal"
)

// internalSysMenuDao is internal type for wrapping internal DAO implements.
type internalSysMenuDao = *internal.SysMenuDao

// sysMenuDao is the data access object for table sys_menu.
// You can define custom methods on it to extend its functionality as you wish.
type sysMenuDao struct {
	internalSysMenuDao
}

var (
	// SysMenu is globally public accessible object for table sys_menu operations.
	SysMenu = sysMenuDao{
		internal.NewSysMenuDao(),
	}
)
// Fill with you ideas below.
func GetMenuAll(ctx context.Context) ([]*model.MenuDTO, error) {
	var (
		menus []*model.MenuDTO
	)
	err := SysMenu.Ctx(ctx).
		Where("status=1 ").
		OrderAsc("sort").Scan(&menus)
	return menus, err
}

func GetMenuAllTree(ctx context.Context) ([]*model.MenuDTO, error) {
	var (
		menus []*model.MenuDTO
	)
	err := SysMenu.Ctx(ctx).
		Where("status=1 and type=0 ").
		OrderAsc("pid,sort").Scan(&menus)
	res := new(model.MenuDTO)
	formatMenu(menus, 0, res)

	return res.Children, err
}
func formatMenu(res []*model.MenuDTO, pid int, menus *model.MenuDTO) {
	for _, v := range res {
		if v.Pid == uint64(pid) {
			formatMenu(res, int(v.Id), v)
			if menus.Children == nil {
				menus.Children = make([]*model.MenuDTO, 0)
			}
			menus.Children = append(menus.Children, v)
		}
	}
}
func GetMenuAllTreeByRoleId(ctx context.Context, roleId uint64) ([]*model.MenuDTO, error) {
	var (
		menus []*model.MenuDTO
	)
	err := SysMenu.Ctx(ctx).
		Fields(fmt.Sprintf("%s.*", SysMenu.Table())).
		InnerJoin(SysRoleMenu.Table(), fmt.Sprintf("%s.id=%s.menu_id", SysMenu.Table(), SysRoleMenu.Table())).
		Where("sys_menu.status=1 and sys_menu.type=0 and sys_role_menu.role_id=?", roleId).
		OrderAsc("sort").Scan(&menus)
	res := new(model.MenuDTO)
	formatMenu(menus, 0, res)

	return res.Children, err
}
func GetPermissions(ctx context.Context, userId uint64) ([]entity.SysMenu, error) {
	var permissions []entity.SysMenu
	err := SysMenu.Ctx(ctx).
		Fields("sys_menu.permission").
		InnerJoin(SysRoleMenu.Table(), "sys_menu.id=sys_role_menu.menu_id").
		InnerJoin(SysAdmin.Table(), "sys_admin.role_id=sys_role_menu.role_id").
		Where("sys_admin.id=? ", userId).
		OrderAsc("sys_menu.sort").
		Scan(&permissions)

	if err != nil {
		return nil, err
	}
	return permissions, nil
}
